<?php

/**
 * This file is part of the Texy! formatter (http://texy.info/)
 *
 * @author     David Grudl
 * @copyright  Copyright (c) 2004-2007 David Grudl aka -dgx- (http://www.dgx.cz)
 * @license    GNU GENERAL PUBLIC LICENSE version 2 or 3
 * @version    $Revision$ $Date$
 * @category   Text
 * @package    Texy
 */

// security - include texy.php, not this file
if (!class_exists('Texy')) die();




define('TEXY_HEADING_DYNAMIC',  1);  // auto-leveling
define('TEXY_HEADING_FIXED', 2);

/**
 * Heading module
 */
class TexyHeadingModule extends TexyModule
{
    /** @var string  textual content of first heading */
    var $title;

    /** @var array  generated Table of Contents */
    var $TOC;

    /** @var bool  autogenerate ID */
    var $generateID = FALSE;

    /** @var string  prefix for autogenerated ID */
    var $idPrefix = 'toc-';

    /** @var int  level of top heading, 1..6 */
    var $top = 1;

    /** @var int  balancing mode */
    var $balancing = TEXY_HEADING_DYNAMIC;

    /** @var array  when $balancing = TexyHeadingModule::FIXED */
    var $levels = array(
        '#' => 0,  //  #  -->  $levels['#'] + $top = 0 + 1 = 1  --> <h1> ... </h1>
        '*' => 1,
        '=' => 2,
        '-' => 3,
    );

    /** @var array  used ID's */
    var $usedID; /* private */

    /** @var array */
//    var $dynamicMap; /* private */

    /** @var int */
//    var $dynamicTop; /* private */

    var $PHP4 = array(
        'dynamicMap' => NULL,
        'dynamicTop' => NULL,
    );


    function __construct($texy)
    {
        $this->texy = $texy;

        $texy->addHandler('heading', array($this, 'solve'));
        $texy->addHandler('beforeParse', array($this, 'beforeParse'));

        $texy->registerBlockPattern(
            array($this, 'patternUnderline'),
            '#^(\S.*)'.TEXY_MODIFIER_H.'?\n'
          . '(\#{3,}|\*{3,}|={3,}|-{3,})$#mU',
            'heading/underlined'
        );

        $texy->registerBlockPattern(
            array($this, 'patternSurround'),
            '#^(\#{2,}+|={2,}+)(.+)'.TEXY_MODIFIER_H.'?()$#mU',
            'heading/surrounded'
        );
    }


    function beforeParse()
    {
        $this->title = NULL;
        $this->usedID = array();

        // clear references
        $this->TOC = array();
        $foo1 = array(); $this->PHP4['dynamicMap'] = & $foo1;
        $foo2 = -100; $this->PHP4['dynamicTop'] = & $foo2;
    }



    /**
     * Callback for underlined heading
     *
     *  Heading .(title)[class]{style}>
     *  -------------------------------
     *
     * @param TexyBlockParser
     * @param array      regexp matches
     * @param string     pattern name
     * @return TexyHtml|string|FALSE
     */
    function patternUnderline($parser, $matches)
    {
        list(, $mContent, $mMod, $mLine) = $matches;
        //  $matches:
        //    [1] => ...
        //    [2] => .(title)[class]{style}<>
        //    [3] => ...

        $mod = new TexyModifier($mMod);
        $level = $this->levels[$mLine[0]];
        return $this->texy->invokeHandlers('heading', $parser, array($level, $mContent, $mod, FALSE));
    }



    /**
     * Callback for surrounded heading
     *
     *   ### Heading .(title)[class]{style}>
     *
     * @param TexyBlockParser
     * @param array      regexp matches
     * @param string     pattern name
     * @return TexyHtml|string|FALSE
     */
    function patternSurround($parser, $matches)
    {
        list(, $mLine, $mContent, $mMod) = $matches;
        //    [1] => ###
        //    [2] => ...
        //    [3] => .(title)[class]{style}<>

        $mod = new TexyModifier($mMod);
        $level = 7 - min(7, max(2, strlen($mLine)));
        $mContent = rtrim($mContent, $mLine[0] . ' ');
        return $this->texy->invokeHandlers('heading', $parser, array($level, $mContent, $mod, TRUE));
    }



    /**
     * Finish invocation
     *
     * @param TexyHandlerInvocation  handler invocation
     * @param int
     * @param string
     * @param TexyModifier
     * @param bool
     * @return TexyHtml
     */
    function solve($invocation, $level, $content, $mod, $isSurrounded)
    {
        $tx = $this->texy;
        $el = new TexyHeadingElement;
        $mod->decorate($tx, $el);

        $el->_level = $level;
        $el->PHP4['top'] = $this->top;

        if ($this->balancing === TEXY_HEADING_DYNAMIC) {
            if ($isSurrounded) {
                $this->PHP4['dynamicTop'] = max($this->PHP4['dynamicTop'], $this->top - $level);
                $el->PHP4['top'] = & $this->PHP4['dynamicTop'];
            } else {
                $this->PHP4['dynamicMap'][$level] = $level;
                $el->PHP4['map'] = & $this->PHP4['dynamicMap'];
            }
        }
        $el->parseLine($tx, trim($content));

        // document title
        $title = trim($el->toText($tx));
        if ($this->title === NULL) $this->title = $title;

        // Table of Contents
        if ($this->generateID && empty($el->attrs['id'])) {
            $id = $this->idPrefix . Texy::webalize($title);
            $counter = '';
            if (isset($this->usedID[$id . $counter])) {
                $counter = 2;
                while (isset($this->usedID[$id . '-' . $counter])) $counter++;
                $id .= '-' . $counter;
            }
            $this->usedID[$id] = TRUE;
            $el->attrs['id'] = $id;
        }

        $TOC = array(
            'id' => isset($el->attrs['id']) ? $el->attrs['id'] : NULL,
            'title' => $title,
            'level' => 0,
        );
        $this->TOC[] = & $TOC;
        $el->PHP4['TOC'] = & $TOC;

        return $el;
    }


}







/**
 * HTML ELEMENT H1-6
 */
class TexyHeadingElement extends TexyHtml
{
    var $_level;
    var $PHP4 = array(
        'top' => NULL,
        'map' => NULL,
        'TOC' => NULL,
    );

    function startTag()
    {
        $level = $this->_level;

        if ($this->PHP4['map']) {
            asort($this->PHP4['map']);
            $level = array_search($level, array_values($this->PHP4['map']), TRUE);
        }

        $level += $this->PHP4['top'];

        $this->setName('h' . min(6, max(1, $level)));
        $this->PHP4['TOC']['level'] = $level;
        return parent::startTag();
    }

}
